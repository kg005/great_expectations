{
    "title": "Expect Table Column Count To Be Between",
    "description": "Expect the number of columns to be between two values.\n\nexpect_table_column_count_to_be_between is a     [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\nBatchExpectations are one of the most common types of Expectation.\nThey are evaluated for an entire Batch, and answer a semantic question about the Batch itself.\n\nArgs:\n    min_value (int or None): The minimum number of columns, inclusive.\n    max_value (int or None): The maximum number of columns, inclusive.\n\nOther Parameters:\n    result_format (str or None):             Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.             For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n    catch_exceptions (boolean or None):             If True, then catch exceptions and include them as part of the result object.             For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n    meta (dict or None):             A JSON-serializable dictionary (nesting allowed) that will be included in the output without             modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\nReturns:\n    An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n    Exact fields vary depending on the values passed to result_format, catch_exceptions, and meta.\n\nNotes:\n    * min_value and max_value are both inclusive.\n    * If min_value is None, then max_value is treated as an upper bound, and the number of acceptable columns           has no minimum.\n    * If max_value is None, then min_value is treated as a lower bound, and the number of acceptable columns           has no maximum.\n\nSee Also:\n    [expect_table_column_count_to_equal](https://greatexpectations.io/expectations/expect_table_column_count_to_equal)\n\nSupported Datasources:\n    [Snowflake](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [PostgreSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n\nData Quality Category:\n    Schema\n\nExample Data:\n            test    test2\n        0   1.00    2\n        1   2.30    5\n        2   4.33    0\n\nCode Examples:\n    Passing Case:\n        Input:\n            ExpectTableColumnCountToBeBetween(\n                min_value=1\n                max_value=3\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": 2\n              },\n              \"meta\": {},\n              \"success\": true\n            }\n\n    Failing Case:\n        Input:\n            ExpectTableColumnCountToBeBetween(\n                min_value=3\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": 2\n              },\n              \"meta\": {},\n              \"success\": false\n            }",
    "type": "object",
    "properties": {
        "id": {
            "title": "Id",
            "type": "string"
        },
        "meta": {
            "title": "Meta",
            "type": "object"
        },
        "notes": {
            "title": "Notes",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "result_format": {
            "title": "Result Format",
            "default": "BASIC",
            "anyOf": [
                {
                    "$ref": "#/definitions/ResultFormat"
                },
                {
                    "type": "object"
                }
            ]
        },
        "catch_exceptions": {
            "title": "Catch Exceptions",
            "default": false,
            "type": "boolean"
        },
        "rendered_content": {
            "title": "Rendered Content",
            "type": "array",
            "items": {
                "type": "object"
            }
        },
        "batch_id": {
            "title": "Batch Id",
            "type": "string"
        },
        "row_condition": {
            "title": "Row Condition",
            "type": "string"
        },
        "condition_parser": {
            "title": "Condition Parser",
            "type": "string"
        },
        "mostly": {
            "title": "Mostly",
            "default": 1.0,
            "description": "Successful if at least `mostly` fraction of values match the expectation.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0,
            "multipleOf": 0.01
        },
        "min_value": {
            "title": "Min Value",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "object"
                },
                {
                    "type": "string",
                    "format": "date-time"
                }
            ]
        },
        "max_value": {
            "title": "Max Value",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "object"
                },
                {
                    "type": "string",
                    "format": "date-time"
                }
            ]
        },
        "metadata": {
            "type": "object",
            "properties": {
                "domain_type": {
                    "title": "Domain Type",
                    "type": "string",
                    "const": "table",
                    "description": "Batch"
                },
                "data_quality_issues": {
                    "title": "Data Quality Issues",
                    "type": "array",
                    "const": [
                        "Schema"
                    ]
                },
                "library_metadata": {
                    "title": "Library Metadata",
                    "type": "object",
                    "const": {
                        "maturity": "production",
                        "tags": [
                            "core expectation",
                            "table expectation"
                        ],
                        "contributors": [
                            "@great_expectations"
                        ],
                        "requirements": [],
                        "has_full_test_suite": true,
                        "manually_reviewed_code": true
                    }
                },
                "short_description": {
                    "title": "Short Description",
                    "type": "string",
                    "const": "Expect the number of columns to be between two values."
                },
                "supported_data_sources": {
                    "title": "Supported Data Sources",
                    "type": "array",
                    "const": [
                        "Snowflake",
                        "PostgreSQL"
                    ]
                }
            }
        }
    },
    "additionalProperties": false,
    "definitions": {
        "ResultFormat": {
            "title": "ResultFormat",
            "description": "An enumeration.",
            "enum": [
                "BOOLEAN_ONLY",
                "BASIC",
                "COMPLETE",
                "SUMMARY"
            ],
            "type": "string"
        }
    }
}
